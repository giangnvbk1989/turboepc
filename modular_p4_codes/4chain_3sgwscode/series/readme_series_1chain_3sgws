1. TurboEPC-Series
    This is a 1 chain experiment. The chain consists of RAN, DGW and SGW1_1,SGW1_2,SGW1_3,PGW. 
    Every SGW switch has a local ONOS controller running on it. DGW connects to all SGWs 
    RUN steps:
    1. on the base machine, create all bridges using the ~/bridge_init.sh script
    2. start the containers using the container start script
    3. ssh into all the containers on terminator using 10.0.3.* IPs (deafult username:ubuntu passworsd:ubuntu)
    4. on the root container :
        a. cd ~/onos 
        b. ./run_onos.sh
    5. To connect the individual switches to root, follow thses steps for DGW,PGW switches:
        a. cd ~/scripts
        b. ./run_switch_wo_log.sh // this will start the bmv2 switches
    6. To connect the SGW1_1,SGW1_2,SGW1_3 switches we will pin the switch process to respective CPU cores 
       The CPU_NUMBER for SGW1_1,SGW1_2,SGW1_3 are 25,27,29 respectively
        a. cd ~/scripts
        b. taskset -c <CPU_NUMBER> ./run_switch_wo_log.sh // this will start the bmv2 switch process 
    7. once all the switches are started, we need to connect them to root controller in specific order 
       to connect to root controller go to terminal of each switch and run the following commands
        a. cd ~/scripts
        b. python con.py  // this will connect the switch to the root controller  
       Repeat steps 7a and 7b for all the switches in this order: DGW1,SGW1_1,SGW1_2,SGW1_3,PGW
    8. Next we need to start the local ONOS at each SGW1_1,SGW1_2,SGW1_3
       We will PIN the onos controller to a specific CPU core in SGWs
       The CPU_NUMBER for SGW1_1,SGW1_2,SGW1_3 are 24,26,28 respectively
       a. cd ~/onos 
       b. taskset -c <CPU_NUMBER> ./run_onos.sh
    9. Now connect SGW switches to their respective local ONOS controller as well.
      To do so, follow thses commands on terminals SGW1_1,SGW1_2,SGW1_3
      a. cd ~/scripts
      b. python offload_con.py // this connects the switch to local controller
    
    10. we need to connect the DGW to all SGWs local controller 
      a.  cd ~/scripts
      b. python offload_con.py // this connects the DGW switch to SGW1_1 local controller
      b. python offload2_con.py // this connects the DGW switch to SGW1_2 local controller
      b. python offload3_con.py // this connects the DGW switch to SGW1_3 local controller
    
    10. once all the switches are connected to root contoller, bring up the onos CLI and activate epc app at the root controller terminal using the steps below:
       a. cd ~
       b. onos localhost
       c. onos cli> app activate org.onosproject.p4tutorial.epc
    11. Repeat step 10 for local controller running at  SGW1_1,SGW1_2,SGW1_3 as well

    12. For the SGW switch to generate a reply packet, we clone the packet so we need to add a directive on the switch CLI as well
     on each of SGWs, SGW1_1,SGW1_2,SGW1_3 run the following commands:
       a. simple_switch_CLI --thrift-port 9090
       b. cli> mirroring_add 500 1  // 500 is the session ID and 1 is the egress port
       
    13. To start the ran Load Generator go to ran container terminal 
       a. cd ran_code/clone_bitwise_lg
       b. make
       c. sudo ./ran 1 1 0k // this will run ran for 1 thread for 1 minute 


    ****************************************   Tuning the setup for custom hit/miss of UEs **************************************************

    1. RAN : 
        in ran.cpp file "start_ue" variable can be configured for the staring ue number.  Max UE num (for 1 chain) = "start_ue" + no of threads (paramenter passed during ran startup)
    2. Root ONOS controller 
        in Constants.java (~/onos/apps/p4-tutorial/epc/src/main/java/org/onsoproject/p4tutorial/epc/Constants.java) file 
        LB11, UB11 : range for hit on first SGW switch
        LB12, UB12 : range for hit on second SGW switch
        LB13, UB13 : range for hit on third SGW switch
        UE_LB, UE_UB : this are global UE range, if UE number lies in this range then only the root controller will push the state to the switches.
        To simulate the miss : UE_LB, UE_UB range should be outside the range of all three switches individual range
    3. Switches: 
       ~/onos/apps/p4-tutorial/pipeconf_sgw1/src/main/resources/include/definitions.p4:
       This file contains 3 ranges 
       LB11,LB12  
       LB12,UB12 
       LB13,UB13 
       configure these ranges as per the root controller range
       Similary update the range in files 
        ~/onos/apps/p4-tutorial/pipeconf_sgw2/src/main/resources/include/definitions.p4
        ~/onos/apps/p4-tutorial/pipeconf_sgw3/src/main/resources/include/definitions.p4
    4. Repeat step 3 for local SGW ONOS controller as well
    